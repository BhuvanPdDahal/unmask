generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    username  String   @unique
    email     String   @unique
    password  String
    image     String?
    joinedAt  DateTime @default(now())
    updatedAt DateTime @updatedAt

    posts           Post[]
    views           View[]
    comments        Comment[]
    replies         Reply[]
    postLikes       PostLike[]
    commentLikes    CommentLike[]
    replyLikes      ReplyLike[]
    pollOptionVotes PollOptionVote[]
    bookmarks       Bookmark[]
}

model VerificationToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    token     String
    expiresAt DateTime
}

model Post {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    creatorId   String   @db.ObjectId
    title       String
    description String
    image       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    poll      Poll?
    views     View[]
    comments  Comment[]
    likes     PostLike[]
    bookmarks Bookmark[]

    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    @@index(fields: [creatorId])
}

model Poll {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    postId String @unique @db.ObjectId

    options PollOption[]

    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PollOption {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    pollId String @db.ObjectId
    option String

    votes PollOptionVote[]

    poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
}

model PollOptionVote {
    id           String @id @default(auto()) @map("_id") @db.ObjectId
    pollOptionId String @db.ObjectId
    voterId      String @db.ObjectId

    pollOption PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
    voter      User       @relation(fields: [voterId], references: [id], onDelete: Cascade)

    @@unique([pollOptionId, voterId])
}

model View {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    viewerId String?  @db.ObjectId // For logged in users
    viewerIp String? // For non logged in users
    postId   String   @db.ObjectId
    viewedAt DateTime @default(now())

    post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
    viewer User? @relation(fields: [viewerId], references: [id], onDelete: Cascade)

    @@unique([postId, viewerId, viewerIp])
    @@index(fields: [viewerId, viewerIp])
}

model Comment {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    commenterId String   @db.ObjectId
    postId      String   @db.ObjectId
    comment     String
    commentedAt DateTime @default(now())
    updatedAt   DateTime @updatedAt

    likes   CommentLike[]
    replies Reply[]

    post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    commenter User @relation(fields: [commenterId], references: [id], onDelete: Cascade)
}

model Reply {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    replierId String   @db.ObjectId
    commentId String   @db.ObjectId
    reply     String
    repliedAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    likes ReplyLike[]

    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    replier User    @relation(fields: [replierId], references: [id], onDelete: Cascade)
}

model PostLike {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    likerId String @db.ObjectId
    postId  String @db.ObjectId

    post  Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    liker User @relation(fields: [likerId], references: [id], onDelete: Cascade)

    @@unique([likerId, postId])
}

model CommentLike {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    likerId   String @db.ObjectId
    commentId String @db.ObjectId

    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    liker   User    @relation(fields: [likerId], references: [id], onDelete: Cascade)

    @@unique([likerId, commentId])
}

model ReplyLike {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    likerId String @db.ObjectId
    replyId String @db.ObjectId

    reply Reply @relation(fields: [replyId], references: [id], onDelete: Cascade)
    liker User  @relation(fields: [likerId], references: [id], onDelete: Cascade)

    @@unique([likerId, replyId])
}

model Bookmark {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    bookmarkerId String   @db.ObjectId
    postId       String   @db.ObjectId
    bookmarkedAt DateTime @default(now())

    bookmarker User @relation(fields: [bookmarkerId], references: [id], onDelete: Cascade)
    post       Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([bookmarkerId, postId])
}
